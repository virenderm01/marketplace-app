service:
  name: sls-mrkt-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation


#package:
  #individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    
    ADVERTISEMENT_TABLE: Market-place-advertisement-${self:provider.stage}
    CATEGORIES_TABLE: Market-place-categories-${self:provider.stage}
    AUTH_0_JWKS_URL: https://smartshopper.auth0.com/.well-known/jwks.json
    MARKETPLACE_S3_BUCKET: serverless-udacity-marketplace-${self:provider.stage}
    CONNECTIONS_TABLE: Connections-Marketplace-${self:provider.stage}
    CATEGORY_USER_ID_INDEX: CategoryUserIdIndex
    ADVERTISEMENT_ID_INDEX: AdvCategoryIdIndex
    ADVERTISEMENT_USER_ID_INDEX: AdvUserIdIndex
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
 
    - Effect: "Allow" # xray permissions (required)
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - "*"

custom:
  marketplaceTopicName: marketplaceUrlTopic-${self:provider.stage}

  documentation:
    api:
      info:
        version: '1.0.0'
        title: Marketplace App API
        description: APIs for serverless ToDo App
    models:
      - name: CreateAdvRequest
        contentType: application/json
        schema: ${file(models/create-advertisement-request.json)}
      - name: UpdateAdvRequest
        contentType: application/json
        schema: ${file(models/update-advertisement-request.json)}
      - name: CreateCategoryRequest
        contentType: application/json
        schema: ${file(models/create-category-request.json)}

functions:

  AuthAdv:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetCategories:
    handler: src/lambda/http/getCategories.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}/index/${self:provider.environment.CATEGORY_USER_ID_INDEX}
    events:
      - http:
          method: get
          path: categories
          cors: true
          authorizer: AuthAdv
  
  CreateCategory:
    handler: src/lambda/http/createCategory.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
    events:
      - http:
          method: post
          path: categories
          cors: true
          authorizer: AuthAdv
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new group
            description: Create a new group
            requestModels:
              'application/json': CreateCategoryRequest

  GetAdvs:
    handler: src/lambda/http/getAdvertisements.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}
      - Effect: "Allow"
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}/index/${self:provider.environment.ADVERTISEMENT_ID_INDEX}
    events:
      - http:
          method: get
          path: categories/{categoryId}/advertisements
          cors: true
          authorizer: AuthAdv
  
  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  SyncWithElasticSearch:
    environment:
      ES_ENDPOINT: !GetAtt AdvsSearch.DomainEndpoint
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt AdvsDynamoDBTable.StreamArn

  GetAdvUploadUrl:
    handler: src/lambda/http/getAdvertisementUploadUrl.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}
      - Effect: "Allow"
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.MARKETPLACE_S3_BUCKET}/*
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}/index/${self:provider.environment.ADVERTISEMENT_ID_INDEX}
    events:
      - http:
          method: get
          path: categories/{categoryId}/advertisements/{advId}/attachment
          cors: true
          authorizer: AuthAdv

  DeleteAdv:
    handler: src/lambda/http/deleteAdvertisement.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}/index/${self:provider.environment.ADVERTISEMENT_ID_INDEX}
    events:
      - http:
          method: delete
          path: categories/{categoryId}/advertisements/{advId}
          cors: true
          authorizer: AuthAdv

  CreateAdv:
    handler: src/lambda/http/createAdvertisement.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}
      - Effect: "Allow"
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
    events:
      - http:
          method: post
          path: categories/{categoryId}/advertisements
          cors: true
          authorizer: AuthAdv
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new advertisement
            description: Create a new advertisement
            requestModels:
              'application/json': CreateAdvRequest

  UpdateAdv:
    handler: src/lambda/http/updateAdvertisement.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}/index/${self:provider.environment.ADVERTISEMENT_ID_INDEX}
    events:
      - http:
          method: patch
          path: categories/{categoryId}/advertisements/{advId}
          cors: true
          authorizer: AuthAdv
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update  advertisement
            description: update existing advertisement
            requestModels:
              'application/json': UpdateAdvRequest
      
  SendUploadNotifications:
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotificationOfNewAdvertisement.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
      - Effect: "Allow"
        Action:
          - execute-api:ManageConnections
          - execute-api:Invoke
        Resource:  
          Fn::Join:
            - ''
            - - 'arn:aws:execute-api:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':'
              - !Ref WebsocketsApi
              - '/dev/POST/@connections/*'
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADVERTISEMENT_TABLE}/index/${self:provider.environment.ADVERTISEMENT_ID_INDEX}
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - !Ref AWS::Region
                - !Ref AWS::AccountId
                - ${self:custom.marketplaceTopicName}
          topicName: ${self:custom.marketplaceTopicName}


resources:
  Resources:
    

    AdvsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: advId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: advId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ADVERTISEMENT_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ADVERTISEMENT_ID_INDEX}
            KeySchema:
            - AttributeName: categoryId
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
         

    CategoriesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: categoryId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: categoryId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CATEGORIES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CATEGORY_USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET, OPTIONS, POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref MarketplaceTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.MARKETPLACE_S3_BUCKET}
        Topics:
          - !Ref MarketplaceTopic

    MarketplaceTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Marketplace bucket topic
        TopicName: ${self:custom.marketplaceTopicName}

    MarketplaceBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.MARKETPLACE_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref MarketplaceTopic
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 300000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.MARKETPLACE_S3_BUCKET}/*'
        Bucket: !Ref MarketplaceBucket
 
    AdvsSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: advertisements-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'
        
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'